<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jing1&#39;s Notebook</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jing1.moe/"/>
  <updated>2020-01-12T18:18:06.468Z</updated>
  <id>http://jing1.moe/</id>
  
  <author>
    <name>El Chiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jing1.moe/2020/01/13/hello-world/"/>
    <id>http://jing1.moe/2020/01/13/hello-world/</id>
    <published>2020-01-12T18:18:06.468Z</published>
    <updated>2020-01-12T18:18:06.468Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Windows 下为 Git 配置代理</title>
    <link href="http://jing1.moe/2020/01/12/git-ssh-proxy-on-win/"/>
    <id>http://jing1.moe/2020/01/12/git-ssh-proxy-on-win/</id>
    <published>2020-01-11T16:00:00.000Z</published>
    <updated>2020-01-13T08:05:06.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-问题"><a href="#0-问题" class="headerlink" title="0. 问题"></a>0. 问题</h2><p>重装电脑后重新配置 Git 的时候发现克隆仓库时速度极慢，记录一下几种代理方法。</p><h2 id="1-基本常识"><a href="#1-基本常识" class="headerlink" title="1. 基本常识"></a>1. 基本常识</h2><p>git clone 有两种方式，一是 HTTP(S)，另一种是 SSH。形式分别为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/&lt;username&gt;/&lt;repo&gt;.git</span><br><span class="line">git <span class="built_in">clone</span> git@github.com/&lt;username&gt;/&lt;repo&gt;.git</span><br></pre></td></tr></table></figure><p>另外，Shadowsocks 有两种代理方式，一是基于 HTTP，另一种基于 Socks5。</p><p>下面介绍分别为两种 Git 协议设置两种代理协议的方法。</p><h2 id="2-配置方法"><a href="#2-配置方法" class="headerlink" title="2. 配置方法"></a>2. 配置方法</h2><h3 id="2-1-HTTP-方式的-HTTP-代理"><a href="#2-1-HTTP-方式的-HTTP-代理" class="headerlink" title="2.1 HTTP 方式的 HTTP 代理"></a>2.1 HTTP 方式的 HTTP 代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><blockquote><p>1080 改为自己本地代理端口。</p></blockquote><h3 id="2-2-HTTP-方式的-Socks5-代理"><a href="#2-2-HTTP-方式的-Socks5-代理" class="headerlink" title="2.2 HTTP 方式的 Socks5 代理"></a>2.2 HTTP 方式的 Socks5 代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1081</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1081</span><br></pre></td></tr></table></figure><blockquote><p>1081 改为自己本地代理端口。</p></blockquote><p>以上两种方式会导致所有的 git 命令都走代理，如果你仅仅想对 GitHub 进行配置，则可以这样配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">git config --global http.https://github.com.proxy https://127.0.0.1:1081</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1081</span><br></pre></td></tr></table></figure><h3 id="2-3-SSH-方式的-HTTP-代理"><a href="#2-3-SSH-方式的-HTTP-代理" class="headerlink" title="2.3 SSH 方式的 HTTP 代理"></a>2.3 SSH 方式的 HTTP 代理</h3><p>参考 <a href="https://stackoverflow.com/questions/5103083/ssh-in-git-behind-proxy-on-windows-7" target="_blank" rel="noopener">StackOverflow: SSH in git behind proxy on windows 7</a></p><h3 id="2-4-SSH-方式的-Socks5-代理"><a href="#2-4-SSH-方式的-Socks5-代理" class="headerlink" title="2.4 SSH 方式的 Socks5 代理"></a>2.4 SSH 方式的 Socks5 代理</h3><p>首先需要使用的 <code>connect.exe</code> 工具已经在 Git 中预置了，可以如下确认：</p><img src="/2020/01/12/git-ssh-proxy-on-win/0.png" class=""><p>然后创建 <code>~/.ssh/config</code> 文件，并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 这里的 -a none 是 NO-AUTH 模式，参见 https:&#x2F;&#x2F;bitbucket.org&#x2F;gotoh&#x2F;connect&#x2F;wiki&#x2F;Home 中的 More detail 一节</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname github.com</span><br><span class="line">  # 注意修改路径为你的路径</span><br><span class="line">  IdentityFile &quot;C:\Users\jing1\.ssh\id_rsa&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line"></span><br><span class="line">Host ssh.github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 443</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  # 注意修改路径为你的路径</span><br><span class="line">  IdentityFile &quot;C:\Users\jing1\.ssh\id_rsa&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-问题&quot;&gt;&lt;a href=&quot;#0-问题&quot; class=&quot;headerlink&quot; title=&quot;0. 问题&quot;&gt;&lt;/a&gt;0. 问题&lt;/h2&gt;&lt;p&gt;重装电脑后重新配置 Git 的时候发现克隆仓库时速度极慢，记录一下几种代理方法。&lt;/p&gt;
&lt;h2 id=&quot;1-基本常识&quot;
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://jing1.moe/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序 UI 测试方案</title>
    <link href="http://jing1.moe/2018/05/21/wechat-applet-ui-test/"/>
    <id>http://jing1.moe/2018/05/21/wechat-applet-ui-test/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2020-01-12T20:09:42.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://github.com/chemzqm/wept" target="_blank" rel="noopener">wept</a></li><li><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a></li><li><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">Jest</a></li></ul><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>这个解决方案中要求 node 版本大于 <code>v7.6.0</code>，因为 <code>puppeteer</code> 要求最低版本是 <code>v6.4.0</code> ，但是官方实例中大量使用 <code>async</code> <code>await</code> 新特性，所以需要使用 <code>v7.6.0</code> 或更高版本的 node。</p><h3 id="wept"><a href="#wept" class="headerlink" title="wept"></a>wept</h3><p><code>wept</code>是一个微信小程序web端实时运行工具。它的后台使用 node 提供服务完全动态生成小程序，前端实现了 view 层、service 层和控制层之间的相关通讯逻辑。支持 Mac, Window 以及 Linux。</p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>Chrome 团队出品的一款更友好的 Headless Chrome Node API ，用于代替用户在页面上面点击、拖拽、输入等多种操作，常见的使用场景还是应用到 UI 自动化测试，puppeteer 可以对页面进行截图保存为图片或者 PDF，解决爬虫无法实现的一些操作（异步加载页面内容） 。</p><p>其他类似的工具：</p><ul><li><a href="http://phantomjs.org/" target="_blank" rel="noopener">phantomjs</a></li><li><a href="http://seleniumhq.github.io/selenium/docs/api/javascript/" target="_blank" rel="noopener">seleniumhq</a></li><li><a href="https://github.com/segmentio/nightmare" target="_blank" rel="noopener">nightmare</a></li></ul><p>在 <code>puppeteer</code> 出来以后，<code>phantomjs</code> 即宣布不再继续开发维护，而 <code>puppeteer</code> 的使用更简单，功能更丰富，所以这里选择了<code>puppeteer</code>。</p><h3 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h3><p><code>Jest</code> 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用。</p><p>其他类似的工具：</p><ul><li><a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a></li><li><a href="https://github.com/chaijs/chai" target="_blank" rel="noopener">chai</a></li></ul><h2 id="开始配置环境"><a href="#开始配置环境" class="headerlink" title="开始配置环境"></a>开始配置环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g wept</span><br><span class="line">npm i --save-dev puppeteer jest</span><br></pre></td></tr></table></figure><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><p>在安装<code>puppeteer</code>有可能会出现以下报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Failed to download Chromium r508693! Set "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD" env variable to skip download.</span><br><span class="line">Error: Download failed: server returned code 502. URL: https://storage.googleapis.com/chromium-browser-snapshots/Win_x64/508693/chrome-win32.zip</span><br><span class="line">    at ClientRequest.https.get.response (D:\chromium\node_modules\puppeteer\utils\ChromiumDownloader.js:197:21)</span><br><span class="line">    at Object.onceWrapper (events.js:316:30)</span><br><span class="line">    at emitOne (events.js:115:13)</span><br><span class="line">    at ClientRequest.emit (events.js:210:7)</span><br><span class="line">    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:565:21)</span><br><span class="line">    at HTTPParser.parserOnHeadersComplete (_http_common.js:116:23)</span><br><span class="line">    at Socket.socketOnData (_http_client.js:454:20)</span><br><span class="line">    at emitOne (events.js:115:13)</span><br><span class="line">    at Socket.emit (events.js:210:7)</span><br><span class="line">    at ClientRequest.onsocket (D:\chromium\node_modules\https-proxy-agent\index.js:181:14)</span><br></pre></td></tr></table></figure><p>原因是安装 <code>puppeteer</code> 时，都会下载 Chromium，然而墙内网络环境不友好可能会导致下载失败。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>安装<code>puppeteer</code>时直接跳过Chromium的下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install puppeteer --ignore-scripts</span><br></pre></td></tr></table></figure><p>手动下载 Chrome 开发版，Win 平台下载链接是<a href="https://storage.googleapis.com/chromium-browser-snapshots/Win_x64/508693/chrome-win32.zip" target="_blank" rel="noopener">https://storage.googleapis.com/chromium-browser-snapshots/Win_x64/508693/chrome-win32.zip</a></p><p>翻开仓库源码可以得知其他下载地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> downloadURLs = &#123;</span><br><span class="line">    linux: <span class="string">'https://storage.googleapis.com/chromium-browser-snapshots/Linux_x64/%d/chrome-linux.zip'</span>,</span><br><span class="line">    mac: <span class="string">'https://storage.googleapis.com/chromium-browser-snapshots/Mac/%d/chrome-mac.zip'</span>,</span><br><span class="line">    win32: <span class="string">'https://storage.googleapis.com/chromium-browser-snapshots/Win/%d/chrome-win32.zip'</span>,</span><br><span class="line">    win64: <span class="string">'https://storage.googleapis.com/chromium-browser-snapshots/Win_x64/%d/chrome-win32.zip'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>选择对应平台，将<code>%d</code>替换成具体编号下载即可。</p><h2 id="一个测试实例"><a href="#一个测试实例" class="headerlink" title="一个测试实例"></a>一个测试实例</h2><h3 id="执行wept"><a href="#执行wept" class="headerlink" title="执行wept"></a>执行wept</h3><p>直接在小程序根目录执行<code>wept</code>，然后打开chrome访问<a href="http://localhost:3000/#!pages/index/index" target="_blank" rel="noopener">http://localhost:3000/#!pages/index/index</a> ，就可以看到小程序运行在chrome上了</p><p><img src="https://cl.ly/3D0g2w2H2m1L/Image%202018-05-19%20at%206.44.47%20PM.png" alt="img"></p><h3 id="用-puppeteer-抓取小程序里的内容"><a href="#用-puppeteer-抓取小程序里的内容" class="headerlink" title="用 puppeteer 抓取小程序里的内容"></a>用 puppeteer 抓取小程序里的内容</h3><p>新建一个 <code>/test</code> 目录，并增加一个 <code>hello.test.js</code> 测试，直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> devices = <span class="built_in">require</span>(<span class="string">'puppeteer/DeviceDescriptors'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">            <span class="comment">// 如果是手动下载chromium则需要制定chromium所在目录的地址</span></span><br><span class="line">            <span class="comment">// executablePath: '/chromium/chrome.exe'</span></span><br><span class="line">            headless: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 新建选项卡</span></span><br><span class="line">        <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">        <span class="comment">// 设置展示设备</span></span><br><span class="line">        <span class="keyword">await</span> page.emulate(devices[<span class="string">'iPhone 6'</span>]);</span><br><span class="line">        <span class="comment">// waitUnitil参数为了保证截图不是白屏</span></span><br><span class="line">        <span class="keyword">await</span> page.goto(<span class="string">'http://localhost:3000/#!pages/index/index'</span>, &#123; <span class="attr">waitUntil</span>: <span class="string">'networkidle2'</span> &#125;);</span><br><span class="line">        <span class="comment">// 截图</span></span><br><span class="line">        <span class="comment">// await page.screenshot(&#123;path: 'example.png'&#125;);</span></span><br><span class="line">        <span class="comment">// 根据iframe的name属性来获取正确的iframe</span></span><br><span class="line">        <span class="keyword">const</span> frames = <span class="keyword">await</span> page.frames();</span><br><span class="line">        <span class="keyword">const</span> weChatFrame = frames.find(<span class="function"><span class="params">f</span> =&gt;</span> f.name() === <span class="string">'view-0'</span>);</span><br><span class="line">        <span class="keyword">const</span> outerText = <span class="keyword">await</span> weChatFrame.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> anchors = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.container'</span>));</span><br><span class="line">            <span class="keyword">return</span> anchors.map(<span class="function"><span class="params">anchor</span> =&gt;</span> anchor.textContent);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'the outerText: '</span>, outerText);</span><br><span class="line">        <span class="comment">// 关闭页面</span></span><br><span class="line">        <span class="keyword">await</span> browser.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="加入-Jest-来进行测试"><a href="#加入-Jest-来进行测试" class="headerlink" title="加入 Jest 来进行测试"></a>加入 Jest 来进行测试</h3><p>完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> devices = <span class="built_in">require</span>(<span class="string">'puppeteer/DeviceDescriptors'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'should return "Hello WorldHello World"'</span>, () =&gt; &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">                headless: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">            <span class="keyword">await</span> page.emulate(devices[<span class="string">'iPhone 6'</span>]);</span><br><span class="line">            <span class="keyword">await</span> page.goto(<span class="string">'http://localhost:3000/#!pages/index/index'</span>, &#123; <span class="attr">waitUntil</span>: <span class="string">'networkidle2'</span> &#125;);</span><br><span class="line">            <span class="keyword">const</span> frames = <span class="keyword">await</span> page.frames();</span><br><span class="line">            <span class="keyword">const</span> weChatFrame = frames.find(<span class="function"><span class="params">f</span> =&gt;</span> f.name() === <span class="string">'view-0'</span>);</span><br><span class="line">            <span class="keyword">const</span> outerText = <span class="keyword">await</span> weChatFrame.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> anchors = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.container'</span>));</span><br><span class="line">                <span class="keyword">return</span> anchors.map(<span class="function"><span class="params">anchor</span> =&gt;</span> anchor.textContent);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'the outerText: '</span>, outerText);</span><br><span class="line">            expect(outerText[<span class="number">0</span>]).toBe(<span class="string">'Hello WorldHello World'</span>);</span><br><span class="line">            <span class="keyword">await</span> browser.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://cl.ly/3n2W2w3K2J3e/Image%202018-05-19%20at%207.23.18%20PM.png" alt="img"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此套方案的优点是易于 set up，无需代理，支持目前所有的小程序API，可使用 Chrome 调试。缺点是 wept 项目作者不再继续维护，并且测试环境和正式环境有一定差异。</p><p>另外小程序官方也有一个云测试，但是一个开发者 24 小时内只能提交一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
    
    
      <category term="小程序" scheme="http://jing1.moe/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器 3 折腾记录</title>
    <link href="http://jing1.moe/2017/09/03/mi-router3-drcom/"/>
    <id>http://jing1.moe/2017/09/03/mi-router3-drcom/</id>
    <published>2017-09-02T16:00:00.000Z</published>
    <updated>2020-01-13T12:28:29.500Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文记录如何将校园网客户端 Drcom 刷进小米路由器3以及在路由器中安装科学上网服务。</p></blockquote><h2 id="获取SSH权限"><a href="#获取SSH权限" class="headerlink" title="获取SSH权限"></a>获取SSH权限</h2><h3 id="升级固件"><a href="#升级固件" class="headerlink" title="升级固件"></a>升级固件</h3><p>在<a href="http://www1.miwifi.com/miwifi_download.html" target="_blank" rel="noopener">官网</a>下载小米路由器3开发版ROM并升级。</p><h3 id="开启SSH工具"><a href="#开启SSH工具" class="headerlink" title="开启SSH工具"></a>开启SSH工具</h3><p>在<a href="http://d.miwifi.com/rom/ssh" target="_blank" rel="noopener">官网</a>获取root密码及工具包</p><p>然后按照以下步骤进行：</p><ol><li>请将下载的工具包bin文件复制到U盘（FAT/FAT32格式）的根目录下，保证文件名为miwifi_ssh.bin；</li><li>断开小米路由器的电源，将U盘插入USB接口；</li><li>按住reset按钮之后重新接入电源，指示灯变为黄色闪烁状态即可松开reset键；</li><li>等待3-5秒后安装完成之后，小米路由器会自动重启，之后您就可以尽情折腾啦 : )</li></ol><h3 id="SSH登陆"><a href="#SSH登陆" class="headerlink" title="SSH登陆"></a>SSH登陆</h3><p>使用 PuTTy 或者 Xshell 连接登陆。</p><p>初始 IP 地址为192.168.31.1，端口 22，用户名 root，密码即为在官网获取的 root 密码。</p><h2 id="安装-opkg"><a href="#安装-opkg" class="headerlink" title="安装 opkg"></a>安装 opkg</h2><h3 id="提取opkg"><a href="#提取opkg" class="headerlink" title="提取opkg"></a>提取opkg</h3><p>可以直接下载这个提取好的<a href="https://el-chiang.github.io/2017/09/03/小米路由器3折腾记录/opkg" target="_blank" rel="noopener">opkg</a>文件</p><h3 id="修改-etc-opkg-conf文件"><a href="#修改-etc-opkg-conf文件" class="headerlink" title="修改 /etc/opkg.conf文件"></a>修改 <code>/etc/opkg.conf</code>文件</h3><p>替换为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;gz attitude_adjustment_base http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;base</span><br><span class="line">src&#x2F;gz attitude_adjustment_packages http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;packages&#x2F;</span><br><span class="line">src&#x2F;gz attitude_adjustment_luci http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;luci&#x2F;</span><br><span class="line">src&#x2F;gz attitude_adjustment_management http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;management&#x2F;</span><br><span class="line">src&#x2F;gz attitude_adjustment_oldpackages http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;oldpackages&#x2F;</span><br><span class="line">src&#x2F;gz attitude_adjustment_routing http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;barrier_breaker&#x2F;14.07&#x2F;ramips&#x2F;mt7620a&#x2F;packages&#x2F;routing&#x2F;</span><br><span class="line">src&#x2F;gz openwrt_dist http:&#x2F;&#x2F;openwrt-dist.sourceforge.net&#x2F;releases&#x2F;ramips&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_dist_luci http:&#x2F;&#x2F;openwrt-dist.sourceforge.net&#x2F;releases&#x2F;luci&#x2F;packages</span><br><span class="line">dest root &#x2F;data</span><br><span class="line">dest ram &#x2F;tmp</span><br><span class="line">lists_dir ext &#x2F;data&#x2F;var&#x2F;opkg-lists</span><br><span class="line">option overlay_root &#x2F;data</span><br><span class="line">arch all 100</span><br><span class="line">arch ramips 200</span><br><span class="line">arch ramips_24kec 300</span><br></pre></td></tr></table></figure><h3 id="添加环境变量。"><a href="#添加环境变量。" class="headerlink" title="添加环境变量。"></a>添加环境变量。</h3><p>修改<code>/etc/profile</code>文件，找到<code>export PATH</code>一行并修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;data&#x2F;usr&#x2F;sbin:&#x2F;data</span><br></pre></td></tr></table></figure><p>再在这一行下面添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;data&#x2F;usr&#x2F;lib</span><br></pre></td></tr></table></figure><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 &#x2F;data&#x2F;opkg</span><br></pre></td></tr></table></figure><h3 id="使环境变量立即生效"><a href="#使环境变量立即生效" class="headerlink" title="使环境变量立即生效"></a>使环境变量立即生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/data/usr/bin:/data/usr/sbin</span><br><span class="line">export LD_LIBRARY_PATH=LD_LIBRARY_PATH:/data/usr/lib</span><br></pre></td></tr></table></figure><p>或者直接使用<code>reboot</code>命令重启即可。</p><h3 id="更新opkg"><a href="#更新opkg" class="headerlink" title="更新opkg"></a>更新opkg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><h3 id="安装-libc"><a href="#安装-libc" class="headerlink" title="安装 libc"></a>安装 libc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/base/libc_0.9.33.2-1_ramips_24kec.ipk</span><br><span class="line">opkg install libc_0.9.33.2-1_ramips_24kec.ipk</span><br></pre></td></tr></table></figure><h3 id="安装-Python-1"><a href="#安装-Python-1" class="headerlink" title="安装 Python"></a>安装 Python</h3><ol><li><p>执行以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg install libreadline</span><br><span class="line">opkg install libffi</span><br><span class="line">opkg install python</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><p>修改 <code>/etc/profile</code>文件，在PATH一行后面添加<code>:/data/usr/bin</code>。</p></li><li><p>使环境变量即使生效（或者直接<code>reboot</code>重启。）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/data:/data/usr/bin</span><br></pre></td></tr></table></figure></li></ol><p>之后输入<code>python --version</code>显示出python版本号则说明已经安装完毕。</p><h2 id="将-Dr-com-装进路由器"><a href="#将-Dr-com-装进路由器" class="headerlink" title="将 Dr.com 装进路由器"></a>将 Dr.com 装进路由器</h2><p>Drcom 脚本GitHub地址：<a href="https://github.com/drcoms/drcom-generic" target="_blank" rel="noopener">https://github.com/drcoms/drcom-generic</a></p><p>我们学校已经抓好包的 <a href="https://el-chiang.github.io/2017/09/03/小米路由器3折腾记录/drcom.py" target="_blank" rel="noopener">drcom.py</a>，下载后找到 <code>username</code> 和 <code>password</code> ，将自己的账号密码填入就能直接使用。</p><p>使用 WinSCP 将 <code>drcom.py</code> 传入 <code>/data</code> 目录下，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python drcom.py $</span><br></pre></td></tr></table></figure><blockquote><p>(命令末尾添加$表示加入后台运行)</p></blockquote><p>现在应该就能够用使用路由器登陆 Drcom 上网了。</p><h2 id="安装-Shadowsocks"><a href="#安装-Shadowsocks" class="headerlink" title="安装 Shadowsocks"></a>安装 Shadowsocks</h2><p>Misstar Tools是一个小米路由器工具箱，能够拓展各种插件，工具。下面利用这个工具箱来安装ss。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>一键安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.misstar.com/tools/appstore/install.sh -O /tmp/install.sh &amp;&amp; chmod +x /tmp/install.sh &amp;&amp; /tmp/install.sh</span><br></pre></td></tr></table></figure><p>之后登陆 <a href="https://blog.jing1.moe/2017/09/03/小米路由器3折腾记录/192.168.31.1" target="_blank" rel="noopener">192.168.31.1</a> 刷新网页就能看到了。</p><p>在插件管理中安装 SS，之后填入节点并连接就能使用路由器翻墙啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文记录如何将校园网客户端 Drcom 刷进小米路由器3以及在路由器中安装科学上网服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;获取SSH权限&quot;&gt;&lt;a href=&quot;#获取SSH权限&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在 Hexo 中插入 LaTeX 数学公式</title>
    <link href="http://jing1.moe/2017/08/03/latex-in-hexo/"/>
    <id>http://jing1.moe/2017/08/03/latex-in-hexo/</id>
    <published>2017-08-02T16:00:00.000Z</published>
    <updated>2020-01-12T19:47:01.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于最近开始学习机器学习，同时想利用博客做点笔记，并且经常会出现大量数学公式，而原生 Hexo 并不支持 LaTeX 公式，但通过一些插件可以解决这个问题，如 MathJax。所以本文主要说明如何在 Hexo 中利用 MathJax 显示数学公式以及如何解决其中遇到的一些冲突问题。</p></blockquote><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>安装方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-math --save</span></span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo math install</span></span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">hexo-math</span></span><br></pre></td></tr></table></figure><p>另外，有些 Hexo 主题是自带 MathJax 的，如本站使用的主题 NexT。这样的话就简单了，只需要在主题配置文件 <code>_config.yml</code> 中找到 <code>Third Party Services Settings</code> ，将 <code>false</code> 改为 <code>ture</code>。如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTM</span></span><br></pre></td></tr></table></figure><p>之后就可以在 markdown 中插入 LaTeX 数学公式了。</p><h2 id="使用-MathJax-插入数学公式"><a href="#使用-MathJax-插入数学公式" class="headerlink" title="使用 MathJax 插入数学公式"></a>使用 MathJax 插入数学公式</h2><p>具体用法请见 <a href="http://catx.me/2014/03/09/hexo-mathjax-plugin/" target="_blank" rel="noopener">Hexo MathJax 插件</a>。</p><h2 id="解决-Hexo-与-LaTeX-语法冲突问题"><a href="#解决-Hexo-与-LaTeX-语法冲突问题" class="headerlink" title="解决 Hexo 与 LaTeX 语法冲突问题"></a>解决 Hexo 与 LaTeX 语法冲突问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>有些时候会出现无法正确渲染的问题，原因是当遇到某些特殊符号时，如 <code>\</code> 或者 <code>_</code>，转 HTML 文件中优先按 Markdown 语法处理，导致 MathJax 无法得到正确的 LaTeX 语句。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>找到 <code>/node_modules/marked/lib/</code> 中的 <code>marked.js</code> 作如下修改：</p><ol><li><p>修改 escape</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#+\-._&gt;])/</span>,</span><br></pre></td></tr></table></figure></li><li><p>修改 em</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">em:<span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></li></ol><p>这样就取消了对某些特殊字符的转义。</p><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\int_&#123;0&#125;^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125;dxdy$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于最近开始学习机器学习，同时想利用博客做点笔记，并且经常会出现大量数学公式，而原生 Hexo 并不支持 LaTeX 公式，但通过一些插件可以解决这个问题，如 MathJax。所以本文主要说明如何在 Hexo 中利用 MathJax 显示数学公式以
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="http://jing1.moe/tags/Hexo/"/>
    
      <category term="LaTeX" scheme="http://jing1.moe/tags/LaTeX/"/>
    
  </entry>
  
</feed>
